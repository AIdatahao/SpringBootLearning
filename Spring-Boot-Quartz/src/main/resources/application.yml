server:
  port: 8080

spring:
  application:
    name: springboot-quartz
  datasource:
    druid:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://localhost:3306/quartz?serverTimezone=GMT%2B8
      username: root
      password: root
      # 连接池的配置
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 连接等待超时时间
      max-wait: 30000
      # 配置检测可以关闭的空闲连接间隔时间
      time-between-eviction-runs-millis: 60000
      # 配置连接在池中的最小生存时间
      min-evictable-idle-time-millis: 300000
      validation-query: select '1' from dual
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache,并且指定每个连接上的PSCache的大小
      pool-prepared-statements: true
      max-open-prepared-statements: 20
      max-pool-prepared-statement-per-connection-size: 20

      # 配置监控统计拦截的filters,去掉后监控界面的sql无法统计,'wall'用于防火墙
      filters: stat,wall
      # Spring监控的AOP切入点,如x.y.z.service.*,配置多个英文逗号分隔
      aop-patterns: com.springboot.service.*

      #WebStatFilter配置
      web-stat-filter:
        enabled: true
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤的格式
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'

      #StatViewFilter配置
      stat-view-servlet:
        enabled: true
        #设置进入Druid监控界面的请求
        url-pattern: /druid/*
        #是否能够重置数据
        reset-enable: false
        #设置访问Druid控制台的账户和密码
        #login-username: admin
        #login-password: admin
        # IP白名单
        # allow: 127.0.0.1
        #　IP黑名单（共同存在时，deny优先于allow）
        # deny: 192.168.1.218
      #配置StatFilter
      filter:
        stat:
          log-slow-sql: true
        wall:
          config:
            multi-statement-allow: true
  quartz:
    #数据库方式
    job-store-type: jdbc
    #scheduler执行器的名称
    scheduler-name: ${spring.application.name}
    #是否覆盖已存在的任务
    overwrite-existing-jobs: off
    #延迟启动时间
    startup-delay: 500ms
    #初始化表结构
    jdbc:
      initialize-schema: never

mybatis:
  # mapper xml实现扫描路径
  # 如果Mapper.xml与Mapper.class在同一个包下且同名,spring扫描Mapper.class的同时会自动扫描同名的Mapper.xml并装配到Mapper.class
  # 如果Mapper.xml与Mapper.class不在同一个包下或者不同名,就必须使用配置mapperLocations指定mapper.xml的位置
  mapper-locations: classpath:mapper/*.xml
  configuration:
    # debug时log打印到控制台的两种方式:
    #   1.logging.level.yourdaoclasspackagename=debug (指定某个包下的SQL打印出来)
    #   2.mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
    #     (所有包下的SQL都会打印出来)
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
