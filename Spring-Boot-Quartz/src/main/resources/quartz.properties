# ThreadPool实现的名称(Quartz自带线程池是"org.quartz.simpl.SimpleThreadPool")
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
# threadCount和threadPriority将以setter的形式注入ThreadPool实例
# 可用于并发执行作业的线程数(只有1到100之间的数字是非常实用的)
org.quartz.threadPool.threadCount=5
# 线程的优先级,默认值为5
org.quartz.threadPool.threadPriority=5
#是否继承初始化线程的上下文加载器类,默认为false
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true

# 默认存储在内存中,RAMJobStore快速轻便,但是当进程终止时,所有调度信息都会丢失
#org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore
# 持久化
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
# DriverDelegate负责执行特定数据库可能需要的任何JDBC工作,需为JobStore选择一个DriverDelegate才能使用
# StdJDBCDelegate是一个使用“vanilla”JDBC代码(和SQL语句)来执行其工作的委托,用于完全符合JDBC的驱动程序
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# 调度程序在被认为是"misfired"之前将"容忍"触发器到下一次触发时间的毫秒数(默认60000)
org.quartz.jobStore.misfireThreshold=5000
# 将该配置参数设置为“true”(默认为false)用以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串
org.quartz.jobStore.useProperties=true
# 表前缀
org.quartz.jobStore.tablePrefix=QRTZ_
# 设置为"true"以打开群集功能;若有多个Quartz实例使用同一组数据库表,则此属性必须设置为"true"
#org.quartz.jobStore.isClustered=false
#org.quartz.jobStore.clusterCheckinInterval:10000

# 设置JobStore使用哪个DataSource
org.quartz.jobStore.dataSource=qzDS
org.quartz.dataSource.qzDS.driver=com.mysql.cj.jdbc.Driver
org.quartz.dataSource.qzDS.URL=jdbc:mysql://localhost:3306/quartz?serverTimezone=GMT%2B8
org.quartz.dataSource.qzDS.user=root
org.quartz.dataSource.qzDS.password=root
org.quartz.dataSource.qzDS.maxConnections=10


#配置集群参见:  https://www.w3cschool.cn/quartz_doc/quartz_doc-3x7u2doc.html
